import { z } from 'zod';
export declare const userSchema: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodString;
    name: z.ZodString;
    password_hash: z.ZodString;
    email_verified: z.ZodBoolean;
    email_verification_token: z.ZodNullable<z.ZodString>;
    password_reset_token: z.ZodNullable<z.ZodString>;
    password_reset_expires: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    email?: string;
    name?: string;
    password_hash?: string;
    email_verified?: boolean;
    email_verification_token?: string;
    password_reset_token?: string;
    password_reset_expires?: string;
    created_at?: string;
    updated_at?: string;
}, {
    id?: string;
    email?: string;
    name?: string;
    password_hash?: string;
    email_verified?: boolean;
    email_verification_token?: string;
    password_reset_token?: string;
    password_reset_expires?: string;
    created_at?: string;
    updated_at?: string;
}>;
export declare const createUserInputSchema: z.ZodObject<{
    email: z.ZodString;
    name: z.ZodString;
    password: z.ZodString;
    email_verified: z.ZodDefault<z.ZodBoolean>;
    email_verification_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    password_reset_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    password_reset_expires: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    email?: string;
    name?: string;
    email_verified?: boolean;
    email_verification_token?: string;
    password_reset_token?: string;
    password_reset_expires?: string;
    password?: string;
}, {
    email?: string;
    name?: string;
    email_verified?: boolean;
    email_verification_token?: string;
    password_reset_token?: string;
    password_reset_expires?: string;
    password?: string;
}>;
export declare const updateUserInputSchema: z.ZodObject<{
    id: z.ZodString;
    email: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    password_hash: z.ZodOptional<z.ZodString>;
    email_verified: z.ZodOptional<z.ZodBoolean>;
    email_verification_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    password_reset_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    password_reset_expires: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    email?: string;
    name?: string;
    password_hash?: string;
    email_verified?: boolean;
    email_verification_token?: string;
    password_reset_token?: string;
    password_reset_expires?: string;
}, {
    id?: string;
    email?: string;
    name?: string;
    password_hash?: string;
    email_verified?: boolean;
    email_verification_token?: string;
    password_reset_token?: string;
    password_reset_expires?: string;
}>;
export declare const searchUsersInputSchema: z.ZodObject<{
    query: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    email_verified: z.ZodOptional<z.ZodBoolean>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["email", "name", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    email?: string;
    email_verified?: boolean;
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "email" | "name" | "created_at";
    sort_order?: "asc" | "desc";
}, {
    email?: string;
    email_verified?: boolean;
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "email" | "name" | "created_at";
    sort_order?: "asc" | "desc";
}>;
export declare const workspaceSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodString;
    default_currency: z.ZodString;
    default_revenue_per_conversion: z.ZodNullable<z.ZodNumber>;
    timezone: z.ZodString;
    data_retention_days: z.ZodNumber;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    name?: string;
    created_at?: string;
    updated_at?: string;
    default_currency?: string;
    default_revenue_per_conversion?: number;
    timezone?: string;
    data_retention_days?: number;
}, {
    id?: string;
    name?: string;
    created_at?: string;
    updated_at?: string;
    default_currency?: string;
    default_revenue_per_conversion?: number;
    timezone?: string;
    data_retention_days?: number;
}>;
export declare const createWorkspaceInputSchema: z.ZodObject<{
    name: z.ZodString;
    default_currency: z.ZodDefault<z.ZodString>;
    default_revenue_per_conversion: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    timezone: z.ZodDefault<z.ZodString>;
    data_retention_days: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    default_currency?: string;
    default_revenue_per_conversion?: number;
    timezone?: string;
    data_retention_days?: number;
}, {
    name?: string;
    default_currency?: string;
    default_revenue_per_conversion?: number;
    timezone?: string;
    data_retention_days?: number;
}>;
export declare const updateWorkspaceInputSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    default_currency: z.ZodOptional<z.ZodString>;
    default_revenue_per_conversion: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    timezone: z.ZodOptional<z.ZodString>;
    data_retention_days: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    name?: string;
    default_currency?: string;
    default_revenue_per_conversion?: number;
    timezone?: string;
    data_retention_days?: number;
}, {
    id?: string;
    name?: string;
    default_currency?: string;
    default_revenue_per_conversion?: number;
    timezone?: string;
    data_retention_days?: number;
}>;
export declare const searchWorkspacesInputSchema: z.ZodObject<{
    query: z.ZodOptional<z.ZodString>;
    currency: z.ZodOptional<z.ZodString>;
    timezone: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["name", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "name" | "created_at";
    sort_order?: "asc" | "desc";
    timezone?: string;
    currency?: string;
}, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "name" | "created_at";
    sort_order?: "asc" | "desc";
    timezone?: string;
    currency?: string;
}>;
export declare const membershipSchema: z.ZodObject<{
    id: z.ZodString;
    user_id: z.ZodString;
    workspace_id: z.ZodString;
    role: z.ZodString;
    status: z.ZodString;
    invited_by: z.ZodNullable<z.ZodString>;
    invitation_token: z.ZodNullable<z.ZodString>;
    invitation_expires: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    user_id?: string;
    workspace_id?: string;
    role?: string;
    invited_by?: string;
    invitation_token?: string;
    invitation_expires?: string;
}, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    user_id?: string;
    workspace_id?: string;
    role?: string;
    invited_by?: string;
    invitation_token?: string;
    invitation_expires?: string;
}>;
export declare const createMembershipInputSchema: z.ZodObject<{
    user_id: z.ZodString;
    workspace_id: z.ZodString;
    role: z.ZodEnum<["owner", "admin", "member"]>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "pending"]>>;
    invited_by: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    invitation_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    invitation_expires: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "pending";
    user_id?: string;
    workspace_id?: string;
    role?: "owner" | "admin" | "member";
    invited_by?: string;
    invitation_token?: string;
    invitation_expires?: string;
}, {
    status?: "active" | "inactive" | "pending";
    user_id?: string;
    workspace_id?: string;
    role?: "owner" | "admin" | "member";
    invited_by?: string;
    invitation_token?: string;
    invitation_expires?: string;
}>;
export declare const updateMembershipInputSchema: z.ZodObject<{
    id: z.ZodString;
    role: z.ZodOptional<z.ZodEnum<["owner", "admin", "member"]>>;
    status: z.ZodOptional<z.ZodEnum<["active", "inactive", "pending"]>>;
    invitation_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    invitation_expires: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    status?: "active" | "inactive" | "pending";
    role?: "owner" | "admin" | "member";
    invitation_token?: string;
    invitation_expires?: string;
}, {
    id?: string;
    status?: "active" | "inactive" | "pending";
    role?: "owner" | "admin" | "member";
    invitation_token?: string;
    invitation_expires?: string;
}>;
export declare const searchMembershipsInputSchema: z.ZodObject<{
    user_id: z.ZodOptional<z.ZodString>;
    workspace_id: z.ZodOptional<z.ZodString>;
    role: z.ZodOptional<z.ZodEnum<["owner", "admin", "member"]>>;
    status: z.ZodOptional<z.ZodEnum<["active", "inactive", "pending"]>>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["role", "status", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "pending";
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "role";
    sort_order?: "asc" | "desc";
    user_id?: string;
    workspace_id?: string;
    role?: "owner" | "admin" | "member";
}, {
    status?: "active" | "inactive" | "pending";
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "role";
    sort_order?: "asc" | "desc";
    user_id?: string;
    workspace_id?: string;
    role?: "owner" | "admin" | "member";
}>;
export declare const accountSchema: z.ZodObject<{
    id: z.ZodString;
    workspace_id: z.ZodString;
    platform: z.ZodString;
    account_id: z.ZodString;
    account_name: z.ZodNullable<z.ZodString>;
    status: z.ZodString;
    currency: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    currency?: string;
    workspace_id?: string;
    platform?: string;
    account_id?: string;
    account_name?: string;
}, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    currency?: string;
    workspace_id?: string;
    platform?: string;
    account_id?: string;
    account_name?: string;
}>;
export declare const createAccountInputSchema: z.ZodObject<{
    workspace_id: z.ZodString;
    platform: z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>;
    account_id: z.ZodString;
    account_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodDefault<z.ZodEnum<["active", "inactive", "paused"]>>;
    currency: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "paused";
    currency?: string;
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    account_id?: string;
    account_name?: string;
}, {
    status?: "active" | "inactive" | "paused";
    currency?: string;
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    account_id?: string;
    account_name?: string;
}>;
export declare const updateAccountInputSchema: z.ZodObject<{
    id: z.ZodString;
    account_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodEnum<["active", "inactive", "paused"]>>;
    currency: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    status?: "active" | "inactive" | "paused";
    currency?: string;
    account_name?: string;
}, {
    id?: string;
    status?: "active" | "inactive" | "paused";
    currency?: string;
    account_name?: string;
}>;
export declare const searchAccountsInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    platform: z.ZodOptional<z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>>;
    status: z.ZodOptional<z.ZodEnum<["active", "inactive", "paused"]>>;
    currency: z.ZodOptional<z.ZodString>;
    query: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["account_name", "platform", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "inactive" | "paused";
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "platform" | "account_name";
    sort_order?: "asc" | "desc";
    currency?: string;
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
}, {
    status?: "active" | "inactive" | "paused";
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "platform" | "account_name";
    sort_order?: "asc" | "desc";
    currency?: string;
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
}>;
export declare const campaignSchema: z.ZodObject<{
    id: z.ZodString;
    account_id: z.ZodString;
    campaign_id: z.ZodString;
    campaign_name: z.ZodNullable<z.ZodString>;
    status: z.ZodString;
    objective: z.ZodNullable<z.ZodString>;
    buying_type: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    account_id?: string;
    campaign_id?: string;
    campaign_name?: string;
    objective?: string;
    buying_type?: string;
}, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    account_id?: string;
    campaign_id?: string;
    campaign_name?: string;
    objective?: string;
    buying_type?: string;
}>;
export declare const createCampaignInputSchema: z.ZodObject<{
    account_id: z.ZodString;
    campaign_id: z.ZodString;
    campaign_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodDefault<z.ZodEnum<["active", "paused", "archived"]>>;
    objective: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    buying_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AUCTION", "RESERVED"]>>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "paused" | "archived";
    account_id?: string;
    campaign_id?: string;
    campaign_name?: string;
    objective?: string;
    buying_type?: "AUCTION" | "RESERVED";
}, {
    status?: "active" | "paused" | "archived";
    account_id?: string;
    campaign_id?: string;
    campaign_name?: string;
    objective?: string;
    buying_type?: "AUCTION" | "RESERVED";
}>;
export declare const updateCampaignInputSchema: z.ZodObject<{
    id: z.ZodString;
    campaign_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodEnum<["active", "paused", "archived"]>>;
    objective: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    buying_type: z.ZodOptional<z.ZodNullable<z.ZodEnum<["AUCTION", "RESERVED"]>>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    status?: "active" | "paused" | "archived";
    campaign_name?: string;
    objective?: string;
    buying_type?: "AUCTION" | "RESERVED";
}, {
    id?: string;
    status?: "active" | "paused" | "archived";
    campaign_name?: string;
    objective?: string;
    buying_type?: "AUCTION" | "RESERVED";
}>;
export declare const searchCampaignsInputSchema: z.ZodObject<{
    account_id: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodEnum<["active", "paused", "archived"]>>;
    objective: z.ZodOptional<z.ZodString>;
    query: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["campaign_name", "status", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "paused" | "archived";
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "campaign_name";
    sort_order?: "asc" | "desc";
    account_id?: string;
    objective?: string;
}, {
    status?: "active" | "paused" | "archived";
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "campaign_name";
    sort_order?: "asc" | "desc";
    account_id?: string;
    objective?: string;
}>;
export declare const adSetSchema: z.ZodObject<{
    id: z.ZodString;
    campaign_id: z.ZodString;
    adset_id: z.ZodString;
    adset_name: z.ZodNullable<z.ZodString>;
    status: z.ZodString;
    bid_strategy: z.ZodNullable<z.ZodString>;
    optimization_goal: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    campaign_id?: string;
    adset_id?: string;
    adset_name?: string;
    bid_strategy?: string;
    optimization_goal?: string;
}, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    campaign_id?: string;
    adset_id?: string;
    adset_name?: string;
    bid_strategy?: string;
    optimization_goal?: string;
}>;
export declare const createAdSetInputSchema: z.ZodObject<{
    campaign_id: z.ZodString;
    adset_id: z.ZodString;
    adset_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodDefault<z.ZodEnum<["active", "paused", "archived"]>>;
    bid_strategy: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    optimization_goal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "paused" | "archived";
    campaign_id?: string;
    adset_id?: string;
    adset_name?: string;
    bid_strategy?: string;
    optimization_goal?: string;
}, {
    status?: "active" | "paused" | "archived";
    campaign_id?: string;
    adset_id?: string;
    adset_name?: string;
    bid_strategy?: string;
    optimization_goal?: string;
}>;
export declare const updateAdSetInputSchema: z.ZodObject<{
    id: z.ZodString;
    adset_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodEnum<["active", "paused", "archived"]>>;
    bid_strategy: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    optimization_goal: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    status?: "active" | "paused" | "archived";
    adset_name?: string;
    bid_strategy?: string;
    optimization_goal?: string;
}, {
    id?: string;
    status?: "active" | "paused" | "archived";
    adset_name?: string;
    bid_strategy?: string;
    optimization_goal?: string;
}>;
export declare const searchAdSetsInputSchema: z.ZodObject<{
    campaign_id: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodEnum<["active", "paused", "archived"]>>;
    query: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["adset_name", "status", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "paused" | "archived";
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "adset_name";
    sort_order?: "asc" | "desc";
    campaign_id?: string;
}, {
    status?: "active" | "paused" | "archived";
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "adset_name";
    sort_order?: "asc" | "desc";
    campaign_id?: string;
}>;
export declare const adSchema: z.ZodObject<{
    id: z.ZodString;
    adset_id: z.ZodString;
    ad_id: z.ZodString;
    ad_name: z.ZodNullable<z.ZodString>;
    creative_name: z.ZodNullable<z.ZodString>;
    creative_thumb_url: z.ZodNullable<z.ZodString>;
    creative_tags: z.ZodNullable<z.ZodString>;
    status: z.ZodString;
    ad_format: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    adset_id?: string;
    ad_id?: string;
    ad_name?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: string;
}, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    adset_id?: string;
    ad_id?: string;
    ad_name?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: string;
}>;
export declare const createAdInputSchema: z.ZodObject<{
    adset_id: z.ZodString;
    ad_id: z.ZodString;
    ad_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    creative_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    creative_thumb_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    creative_tags: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodDefault<z.ZodEnum<["active", "paused", "archived"]>>;
    ad_format: z.ZodOptional<z.ZodNullable<z.ZodEnum<["SINGLE_IMAGE", "SINGLE_VIDEO", "CAROUSEL", "COLLECTION"]>>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "paused" | "archived";
    adset_id?: string;
    ad_id?: string;
    ad_name?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
}, {
    status?: "active" | "paused" | "archived";
    adset_id?: string;
    ad_id?: string;
    ad_name?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
}>;
export declare const updateAdInputSchema: z.ZodObject<{
    id: z.ZodString;
    ad_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    creative_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    creative_thumb_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    creative_tags: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    status: z.ZodOptional<z.ZodEnum<["active", "paused", "archived"]>>;
    ad_format: z.ZodOptional<z.ZodNullable<z.ZodEnum<["SINGLE_IMAGE", "SINGLE_VIDEO", "CAROUSEL", "COLLECTION"]>>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    status?: "active" | "paused" | "archived";
    ad_name?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
}, {
    id?: string;
    status?: "active" | "paused" | "archived";
    ad_name?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
}>;
export declare const searchAdsInputSchema: z.ZodObject<{
    adset_id: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodEnum<["active", "paused", "archived"]>>;
    ad_format: z.ZodOptional<z.ZodEnum<["SINGLE_IMAGE", "SINGLE_VIDEO", "CAROUSEL", "COLLECTION"]>>;
    query: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["ad_name", "status", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    status?: "active" | "paused" | "archived";
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "ad_name";
    sort_order?: "asc" | "desc";
    adset_id?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
}, {
    status?: "active" | "paused" | "archived";
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "ad_name";
    sort_order?: "asc" | "desc";
    adset_id?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
}>;
export declare const metricsDailySchema: z.ZodObject<{
    id: z.ZodString;
    date: z.ZodString;
    platform: z.ZodString;
    account_id: z.ZodString;
    campaign_id: z.ZodNullable<z.ZodString>;
    adset_id: z.ZodNullable<z.ZodString>;
    ad_id: z.ZodNullable<z.ZodString>;
    spend: z.ZodNullable<z.ZodNumber>;
    impressions: z.ZodNullable<z.ZodNumber>;
    clicks: z.ZodNullable<z.ZodNumber>;
    conversions: z.ZodNullable<z.ZodNumber>;
    revenue: z.ZodNullable<z.ZodNumber>;
    ctr: z.ZodNullable<z.ZodNumber>;
    cpm: z.ZodNullable<z.ZodNumber>;
    cpc: z.ZodNullable<z.ZodNumber>;
    cpa: z.ZodNullable<z.ZodNumber>;
    cvr: z.ZodNullable<z.ZodNumber>;
    roas: z.ZodNullable<z.ZodNumber>;
    frequency: z.ZodNullable<z.ZodNumber>;
    reach: z.ZodNullable<z.ZodNumber>;
    video_views: z.ZodNullable<z.ZodNumber>;
    video_view_rate: z.ZodNullable<z.ZodNumber>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    date?: string;
    platform?: string;
    account_id?: string;
    campaign_id?: string;
    adset_id?: string;
    ad_id?: string;
    spend?: number;
    impressions?: number;
    clicks?: number;
    conversions?: number;
    revenue?: number;
    ctr?: number;
    cpm?: number;
    cpc?: number;
    cpa?: number;
    cvr?: number;
    roas?: number;
    frequency?: number;
    reach?: number;
    video_views?: number;
    video_view_rate?: number;
}, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    date?: string;
    platform?: string;
    account_id?: string;
    campaign_id?: string;
    adset_id?: string;
    ad_id?: string;
    spend?: number;
    impressions?: number;
    clicks?: number;
    conversions?: number;
    revenue?: number;
    ctr?: number;
    cpm?: number;
    cpc?: number;
    cpa?: number;
    cvr?: number;
    roas?: number;
    frequency?: number;
    reach?: number;
    video_views?: number;
    video_view_rate?: number;
}>;
export declare const createMetricsDailyInputSchema: z.ZodObject<{
    date: z.ZodString;
    platform: z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>;
    account_id: z.ZodString;
    campaign_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    adset_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ad_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    spend: z.ZodDefault<z.ZodNullable<z.ZodNumber>>;
    impressions: z.ZodDefault<z.ZodNullable<z.ZodNumber>>;
    clicks: z.ZodDefault<z.ZodNullable<z.ZodNumber>>;
    conversions: z.ZodDefault<z.ZodNullable<z.ZodNumber>>;
    revenue: z.ZodDefault<z.ZodNullable<z.ZodNumber>>;
    ctr: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    cpm: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    cpc: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    cpa: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    cvr: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    roas: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    frequency: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    reach: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    video_views: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    video_view_rate: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    date?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    account_id?: string;
    campaign_id?: string;
    adset_id?: string;
    ad_id?: string;
    spend?: number;
    impressions?: number;
    clicks?: number;
    conversions?: number;
    revenue?: number;
    ctr?: number;
    cpm?: number;
    cpc?: number;
    cpa?: number;
    cvr?: number;
    roas?: number;
    frequency?: number;
    reach?: number;
    video_views?: number;
    video_view_rate?: number;
}, {
    date?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    account_id?: string;
    campaign_id?: string;
    adset_id?: string;
    ad_id?: string;
    spend?: number;
    impressions?: number;
    clicks?: number;
    conversions?: number;
    revenue?: number;
    ctr?: number;
    cpm?: number;
    cpc?: number;
    cpa?: number;
    cvr?: number;
    roas?: number;
    frequency?: number;
    reach?: number;
    video_views?: number;
    video_view_rate?: number;
}>;
export declare const searchMetricsDailyInputSchema: z.ZodObject<{
    date_from: z.ZodOptional<z.ZodString>;
    date_to: z.ZodOptional<z.ZodString>;
    platform: z.ZodOptional<z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>>;
    account_id: z.ZodOptional<z.ZodString>;
    campaign_id: z.ZodOptional<z.ZodString>;
    adset_id: z.ZodOptional<z.ZodString>;
    ad_id: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["date", "spend", "impressions", "clicks", "conversions"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    limit?: number;
    offset?: number;
    sort_by?: "date" | "spend" | "impressions" | "clicks" | "conversions";
    sort_order?: "asc" | "desc";
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    account_id?: string;
    campaign_id?: string;
    adset_id?: string;
    ad_id?: string;
    date_from?: string;
    date_to?: string;
}, {
    limit?: number;
    offset?: number;
    sort_by?: "date" | "spend" | "impressions" | "clicks" | "conversions";
    sort_order?: "asc" | "desc";
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    account_id?: string;
    campaign_id?: string;
    adset_id?: string;
    ad_id?: string;
    date_from?: string;
    date_to?: string;
}>;
export declare const uploadJobSchema: z.ZodObject<{
    id: z.ZodString;
    workspace_id: z.ZodString;
    user_id: z.ZodString;
    filename: z.ZodString;
    original_filename: z.ZodString;
    file_size: z.ZodNumber;
    platform: z.ZodString;
    status: z.ZodString;
    progress: z.ZodNumber;
    rows_processed: z.ZodNumber;
    rows_total: z.ZodNumber;
    rows_success: z.ZodNumber;
    rows_error: z.ZodNumber;
    error_text: z.ZodNullable<z.ZodString>;
    error_log_url: z.ZodNullable<z.ZodString>;
    mapping_template_id: z.ZodNullable<z.ZodString>;
    date_from: z.ZodNullable<z.ZodString>;
    date_to: z.ZodNullable<z.ZodString>;
    started_at: z.ZodNullable<z.ZodString>;
    completed_at: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    user_id?: string;
    workspace_id?: string;
    platform?: string;
    date_from?: string;
    date_to?: string;
    filename?: string;
    original_filename?: string;
    file_size?: number;
    progress?: number;
    rows_processed?: number;
    rows_total?: number;
    rows_success?: number;
    rows_error?: number;
    error_text?: string;
    error_log_url?: string;
    mapping_template_id?: string;
    started_at?: string;
    completed_at?: string;
}, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    user_id?: string;
    workspace_id?: string;
    platform?: string;
    date_from?: string;
    date_to?: string;
    filename?: string;
    original_filename?: string;
    file_size?: number;
    progress?: number;
    rows_processed?: number;
    rows_total?: number;
    rows_success?: number;
    rows_error?: number;
    error_text?: string;
    error_log_url?: string;
    mapping_template_id?: string;
    started_at?: string;
    completed_at?: string;
}>;
export declare const createUploadJobInputSchema: z.ZodObject<{
    workspace_id: z.ZodString;
    user_id: z.ZodString;
    filename: z.ZodString;
    original_filename: z.ZodString;
    file_size: z.ZodNumber;
    platform: z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>;
    status: z.ZodDefault<z.ZodEnum<["queued", "processing", "completed", "failed"]>>;
    progress: z.ZodDefault<z.ZodNumber>;
    mapping_template_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    date_from: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    date_to: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    status?: "queued" | "processing" | "completed" | "failed";
    user_id?: string;
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    date_from?: string;
    date_to?: string;
    filename?: string;
    original_filename?: string;
    file_size?: number;
    progress?: number;
    mapping_template_id?: string;
}, {
    status?: "queued" | "processing" | "completed" | "failed";
    user_id?: string;
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    date_from?: string;
    date_to?: string;
    filename?: string;
    original_filename?: string;
    file_size?: number;
    progress?: number;
    mapping_template_id?: string;
}>;
export declare const updateUploadJobInputSchema: z.ZodObject<{
    id: z.ZodString;
    status: z.ZodOptional<z.ZodEnum<["queued", "processing", "completed", "failed"]>>;
    progress: z.ZodOptional<z.ZodNumber>;
    rows_processed: z.ZodOptional<z.ZodNumber>;
    rows_total: z.ZodOptional<z.ZodNumber>;
    rows_success: z.ZodOptional<z.ZodNumber>;
    rows_error: z.ZodOptional<z.ZodNumber>;
    error_text: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    error_log_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    started_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    completed_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    status?: "queued" | "processing" | "completed" | "failed";
    progress?: number;
    rows_processed?: number;
    rows_total?: number;
    rows_success?: number;
    rows_error?: number;
    error_text?: string;
    error_log_url?: string;
    started_at?: string;
    completed_at?: string;
}, {
    id?: string;
    status?: "queued" | "processing" | "completed" | "failed";
    progress?: number;
    rows_processed?: number;
    rows_total?: number;
    rows_success?: number;
    rows_error?: number;
    error_text?: string;
    error_log_url?: string;
    started_at?: string;
    completed_at?: string;
}>;
export declare const searchUploadJobsInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    user_id: z.ZodOptional<z.ZodString>;
    platform: z.ZodOptional<z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>>;
    status: z.ZodOptional<z.ZodEnum<["queued", "processing", "completed", "failed"]>>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["created_at", "status", "progress"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    status?: "queued" | "processing" | "completed" | "failed";
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "progress";
    sort_order?: "asc" | "desc";
    user_id?: string;
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
}, {
    status?: "queued" | "processing" | "completed" | "failed";
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "progress";
    sort_order?: "asc" | "desc";
    user_id?: string;
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
}>;
export declare const mappingTemplateSchema: z.ZodObject<{
    id: z.ZodString;
    workspace_id: z.ZodString;
    name: z.ZodString;
    platform: z.ZodString;
    mapping: z.ZodRecord<z.ZodString, z.ZodAny>;
    is_default: z.ZodBoolean;
    is_shared: z.ZodBoolean;
    created_by: z.ZodString;
    usage_count: z.ZodNumber;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    name?: string;
    created_at?: string;
    updated_at?: string;
    workspace_id?: string;
    platform?: string;
    mapping?: Record<string, any>;
    is_default?: boolean;
    is_shared?: boolean;
    created_by?: string;
    usage_count?: number;
}, {
    id?: string;
    name?: string;
    created_at?: string;
    updated_at?: string;
    workspace_id?: string;
    platform?: string;
    mapping?: Record<string, any>;
    is_default?: boolean;
    is_shared?: boolean;
    created_by?: string;
    usage_count?: number;
}>;
export declare const createMappingTemplateInputSchema: z.ZodObject<{
    workspace_id: z.ZodString;
    name: z.ZodString;
    platform: z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>;
    mapping: z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodAny>, Record<string, any>, Record<string, any>>;
    is_default: z.ZodDefault<z.ZodBoolean>;
    is_shared: z.ZodDefault<z.ZodBoolean>;
    created_by: z.ZodString;
}, "strip", z.ZodTypeAny, {
    name?: string;
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    mapping?: Record<string, any>;
    is_default?: boolean;
    is_shared?: boolean;
    created_by?: string;
}, {
    name?: string;
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    mapping?: Record<string, any>;
    is_default?: boolean;
    is_shared?: boolean;
    created_by?: string;
}>;
export declare const updateMappingTemplateInputSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    mapping: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodAny>>;
    is_default: z.ZodOptional<z.ZodBoolean>;
    is_shared: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    name?: string;
    mapping?: Record<string, any>;
    is_default?: boolean;
    is_shared?: boolean;
}, {
    id?: string;
    name?: string;
    mapping?: Record<string, any>;
    is_default?: boolean;
    is_shared?: boolean;
}>;
export declare const searchMappingTemplatesInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    platform: z.ZodOptional<z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>>;
    is_default: z.ZodOptional<z.ZodBoolean>;
    is_shared: z.ZodOptional<z.ZodBoolean>;
    query: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["name", "usage_count", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "name" | "created_at" | "usage_count";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    is_default?: boolean;
    is_shared?: boolean;
}, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "name" | "created_at" | "usage_count";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    is_default?: boolean;
    is_shared?: boolean;
}>;
export declare const alertRuleSchema: z.ZodObject<{
    id: z.ZodString;
    workspace_id: z.ZodString;
    created_by: z.ZodString;
    name: z.ZodString;
    metric: z.ZodString;
    condition: z.ZodString;
    threshold: z.ZodNullable<z.ZodNumber>;
    threshold_percentage: z.ZodNullable<z.ZodNumber>;
    time_window: z.ZodString;
    platform_filter: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
    account_filter: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
    campaign_filter: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
    severity: z.ZodString;
    is_active: z.ZodBoolean;
    notification_email: z.ZodBoolean;
    notification_in_app: z.ZodBoolean;
    cooldown_minutes: z.ZodNumber;
    last_triggered_at: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    name?: string;
    created_at?: string;
    updated_at?: string;
    workspace_id?: string;
    created_by?: string;
    metric?: string;
    condition?: string;
    threshold?: number;
    threshold_percentage?: number;
    time_window?: string;
    platform_filter?: Record<string, any>;
    account_filter?: Record<string, any>;
    campaign_filter?: Record<string, any>;
    severity?: string;
    is_active?: boolean;
    notification_email?: boolean;
    notification_in_app?: boolean;
    cooldown_minutes?: number;
    last_triggered_at?: string;
}, {
    id?: string;
    name?: string;
    created_at?: string;
    updated_at?: string;
    workspace_id?: string;
    created_by?: string;
    metric?: string;
    condition?: string;
    threshold?: number;
    threshold_percentage?: number;
    time_window?: string;
    platform_filter?: Record<string, any>;
    account_filter?: Record<string, any>;
    campaign_filter?: Record<string, any>;
    severity?: string;
    is_active?: boolean;
    notification_email?: boolean;
    notification_in_app?: boolean;
    cooldown_minutes?: number;
    last_triggered_at?: string;
}>;
export declare const createAlertRuleInputSchema: z.ZodObject<{
    workspace_id: z.ZodString;
    created_by: z.ZodString;
    name: z.ZodString;
    metric: z.ZodEnum<["spend", "impressions", "clicks", "conversions", "revenue", "ctr", "cpm", "cpc", "cpa", "cvr", "roas"]>;
    condition: z.ZodEnum<["greater_than", "less_than", "percentage_increase", "percentage_decrease"]>;
    threshold: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    threshold_percentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    time_window: z.ZodDefault<z.ZodEnum<["hourly", "daily", "weekly"]>>;
    platform_filter: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    account_filter: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    campaign_filter: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    severity: z.ZodDefault<z.ZodEnum<["info", "warning", "critical"]>>;
    is_active: z.ZodDefault<z.ZodBoolean>;
    notification_email: z.ZodDefault<z.ZodBoolean>;
    notification_in_app: z.ZodDefault<z.ZodBoolean>;
    cooldown_minutes: z.ZodDefault<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    workspace_id?: string;
    created_by?: string;
    metric?: "spend" | "impressions" | "clicks" | "conversions" | "revenue" | "ctr" | "cpm" | "cpc" | "cpa" | "cvr" | "roas";
    condition?: "greater_than" | "less_than" | "percentage_increase" | "percentage_decrease";
    threshold?: number;
    threshold_percentage?: number;
    time_window?: "hourly" | "daily" | "weekly";
    platform_filter?: Record<string, any>;
    account_filter?: Record<string, any>;
    campaign_filter?: Record<string, any>;
    severity?: "info" | "warning" | "critical";
    is_active?: boolean;
    notification_email?: boolean;
    notification_in_app?: boolean;
    cooldown_minutes?: number;
}, {
    name?: string;
    workspace_id?: string;
    created_by?: string;
    metric?: "spend" | "impressions" | "clicks" | "conversions" | "revenue" | "ctr" | "cpm" | "cpc" | "cpa" | "cvr" | "roas";
    condition?: "greater_than" | "less_than" | "percentage_increase" | "percentage_decrease";
    threshold?: number;
    threshold_percentage?: number;
    time_window?: "hourly" | "daily" | "weekly";
    platform_filter?: Record<string, any>;
    account_filter?: Record<string, any>;
    campaign_filter?: Record<string, any>;
    severity?: "info" | "warning" | "critical";
    is_active?: boolean;
    notification_email?: boolean;
    notification_in_app?: boolean;
    cooldown_minutes?: number;
}>;
export declare const updateAlertRuleInputSchema: z.ZodObject<{
    id: z.ZodString;
    name: z.ZodOptional<z.ZodString>;
    condition: z.ZodOptional<z.ZodEnum<["greater_than", "less_than", "percentage_increase", "percentage_decrease"]>>;
    threshold: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    threshold_percentage: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    time_window: z.ZodOptional<z.ZodEnum<["hourly", "daily", "weekly"]>>;
    platform_filter: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    account_filter: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    campaign_filter: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    severity: z.ZodOptional<z.ZodEnum<["info", "warning", "critical"]>>;
    is_active: z.ZodOptional<z.ZodBoolean>;
    notification_email: z.ZodOptional<z.ZodBoolean>;
    notification_in_app: z.ZodOptional<z.ZodBoolean>;
    cooldown_minutes: z.ZodOptional<z.ZodNumber>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    name?: string;
    condition?: "greater_than" | "less_than" | "percentage_increase" | "percentage_decrease";
    threshold?: number;
    threshold_percentage?: number;
    time_window?: "hourly" | "daily" | "weekly";
    platform_filter?: Record<string, any>;
    account_filter?: Record<string, any>;
    campaign_filter?: Record<string, any>;
    severity?: "info" | "warning" | "critical";
    is_active?: boolean;
    notification_email?: boolean;
    notification_in_app?: boolean;
    cooldown_minutes?: number;
}, {
    id?: string;
    name?: string;
    condition?: "greater_than" | "less_than" | "percentage_increase" | "percentage_decrease";
    threshold?: number;
    threshold_percentage?: number;
    time_window?: "hourly" | "daily" | "weekly";
    platform_filter?: Record<string, any>;
    account_filter?: Record<string, any>;
    campaign_filter?: Record<string, any>;
    severity?: "info" | "warning" | "critical";
    is_active?: boolean;
    notification_email?: boolean;
    notification_in_app?: boolean;
    cooldown_minutes?: number;
}>;
export declare const searchAlertRulesInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    metric: z.ZodOptional<z.ZodEnum<["spend", "impressions", "clicks", "conversions", "revenue", "ctr", "cpm", "cpc", "cpa", "cvr", "roas"]>>;
    severity: z.ZodOptional<z.ZodEnum<["info", "warning", "critical"]>>;
    is_active: z.ZodOptional<z.ZodBoolean>;
    query: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["name", "severity", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "name" | "created_at" | "severity";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    metric?: "spend" | "impressions" | "clicks" | "conversions" | "revenue" | "ctr" | "cpm" | "cpc" | "cpa" | "cvr" | "roas";
    severity?: "info" | "warning" | "critical";
    is_active?: boolean;
}, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "name" | "created_at" | "severity";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    metric?: "spend" | "impressions" | "clicks" | "conversions" | "revenue" | "ctr" | "cpm" | "cpc" | "cpa" | "cvr" | "roas";
    severity?: "info" | "warning" | "critical";
    is_active?: boolean;
}>;
export declare const alertTriggerSchema: z.ZodObject<{
    id: z.ZodString;
    alert_rule_id: z.ZodString;
    workspace_id: z.ZodString;
    triggered_at: z.ZodString;
    metric_value: z.ZodNumber;
    threshold_value: z.ZodNumber;
    condition_met: z.ZodString;
    affected_entity_type: z.ZodString;
    affected_entity_id: z.ZodString;
    affected_entity_name: z.ZodNullable<z.ZodString>;
    platform: z.ZodString;
    details: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
    is_resolved: z.ZodBoolean;
    resolved_at: z.ZodNullable<z.ZodString>;
    resolved_by: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    workspace_id?: string;
    platform?: string;
    alert_rule_id?: string;
    triggered_at?: string;
    metric_value?: number;
    threshold_value?: number;
    condition_met?: string;
    affected_entity_type?: string;
    affected_entity_id?: string;
    affected_entity_name?: string;
    details?: Record<string, any>;
    is_resolved?: boolean;
    resolved_at?: string;
    resolved_by?: string;
}, {
    id?: string;
    created_at?: string;
    workspace_id?: string;
    platform?: string;
    alert_rule_id?: string;
    triggered_at?: string;
    metric_value?: number;
    threshold_value?: number;
    condition_met?: string;
    affected_entity_type?: string;
    affected_entity_id?: string;
    affected_entity_name?: string;
    details?: Record<string, any>;
    is_resolved?: boolean;
    resolved_at?: string;
    resolved_by?: string;
}>;
export declare const createAlertTriggerInputSchema: z.ZodObject<{
    alert_rule_id: z.ZodString;
    workspace_id: z.ZodString;
    triggered_at: z.ZodString;
    metric_value: z.ZodNumber;
    threshold_value: z.ZodNumber;
    condition_met: z.ZodString;
    affected_entity_type: z.ZodEnum<["account", "campaign", "adset", "ad"]>;
    affected_entity_id: z.ZodString;
    affected_entity_name: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platform: z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>;
    details: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
}, "strip", z.ZodTypeAny, {
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    alert_rule_id?: string;
    triggered_at?: string;
    metric_value?: number;
    threshold_value?: number;
    condition_met?: string;
    affected_entity_type?: "account" | "campaign" | "adset" | "ad";
    affected_entity_id?: string;
    affected_entity_name?: string;
    details?: Record<string, any>;
}, {
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    alert_rule_id?: string;
    triggered_at?: string;
    metric_value?: number;
    threshold_value?: number;
    condition_met?: string;
    affected_entity_type?: "account" | "campaign" | "adset" | "ad";
    affected_entity_id?: string;
    affected_entity_name?: string;
    details?: Record<string, any>;
}>;
export declare const updateAlertTriggerInputSchema: z.ZodObject<{
    id: z.ZodString;
    is_resolved: z.ZodOptional<z.ZodBoolean>;
    resolved_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    resolved_by: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    is_resolved?: boolean;
    resolved_at?: string;
    resolved_by?: string;
}, {
    id?: string;
    is_resolved?: boolean;
    resolved_at?: string;
    resolved_by?: string;
}>;
export declare const searchAlertTriggersInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    alert_rule_id: z.ZodOptional<z.ZodString>;
    platform: z.ZodOptional<z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>>;
    is_resolved: z.ZodOptional<z.ZodBoolean>;
    affected_entity_type: z.ZodOptional<z.ZodEnum<["account", "campaign", "adset", "ad"]>>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["triggered_at", "metric_value", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "triggered_at" | "metric_value";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    alert_rule_id?: string;
    affected_entity_type?: "account" | "campaign" | "adset" | "ad";
    is_resolved?: boolean;
}, {
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "triggered_at" | "metric_value";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    alert_rule_id?: string;
    affected_entity_type?: "account" | "campaign" | "adset" | "ad";
    is_resolved?: boolean;
}>;
export declare const notificationSchema: z.ZodObject<{
    id: z.ZodString;
    user_id: z.ZodString;
    workspace_id: z.ZodString;
    type: z.ZodString;
    title: z.ZodString;
    message: z.ZodString;
    alert_trigger_id: z.ZodNullable<z.ZodString>;
    related_entity_type: z.ZodNullable<z.ZodString>;
    related_entity_id: z.ZodNullable<z.ZodString>;
    is_read: z.ZodBoolean;
    read_at: z.ZodNullable<z.ZodString>;
    priority: z.ZodString;
    action_url: z.ZodNullable<z.ZodString>;
    expires_at: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    message?: string;
    type?: string;
    user_id?: string;
    workspace_id?: string;
    title?: string;
    alert_trigger_id?: string;
    related_entity_type?: string;
    related_entity_id?: string;
    is_read?: boolean;
    read_at?: string;
    priority?: string;
    action_url?: string;
    expires_at?: string;
}, {
    id?: string;
    created_at?: string;
    message?: string;
    type?: string;
    user_id?: string;
    workspace_id?: string;
    title?: string;
    alert_trigger_id?: string;
    related_entity_type?: string;
    related_entity_id?: string;
    is_read?: boolean;
    read_at?: string;
    priority?: string;
    action_url?: string;
    expires_at?: string;
}>;
export declare const createNotificationInputSchema: z.ZodObject<{
    user_id: z.ZodString;
    workspace_id: z.ZodString;
    type: z.ZodEnum<["alert", "system", "info", "warning"]>;
    title: z.ZodString;
    message: z.ZodString;
    alert_trigger_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    related_entity_type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    related_entity_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    priority: z.ZodDefault<z.ZodEnum<["low", "normal", "high", "urgent"]>>;
    action_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expires_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    message?: string;
    type?: "info" | "warning" | "alert" | "system";
    user_id?: string;
    workspace_id?: string;
    title?: string;
    alert_trigger_id?: string;
    related_entity_type?: string;
    related_entity_id?: string;
    priority?: "low" | "normal" | "high" | "urgent";
    action_url?: string;
    expires_at?: string;
}, {
    message?: string;
    type?: "info" | "warning" | "alert" | "system";
    user_id?: string;
    workspace_id?: string;
    title?: string;
    alert_trigger_id?: string;
    related_entity_type?: string;
    related_entity_id?: string;
    priority?: "low" | "normal" | "high" | "urgent";
    action_url?: string;
    expires_at?: string;
}>;
export declare const updateNotificationInputSchema: z.ZodObject<{
    id: z.ZodString;
    is_read: z.ZodOptional<z.ZodBoolean>;
    read_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    is_read?: boolean;
    read_at?: string;
}, {
    id?: string;
    is_read?: boolean;
    read_at?: string;
}>;
export declare const searchNotificationsInputSchema: z.ZodObject<{
    user_id: z.ZodOptional<z.ZodString>;
    workspace_id: z.ZodOptional<z.ZodString>;
    type: z.ZodOptional<z.ZodEnum<["alert", "system", "info", "warning"]>>;
    is_read: z.ZodOptional<z.ZodBoolean>;
    priority: z.ZodOptional<z.ZodEnum<["low", "normal", "high", "urgent"]>>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["created_at", "priority", "is_read"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    type?: "info" | "warning" | "alert" | "system";
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "is_read" | "priority";
    sort_order?: "asc" | "desc";
    user_id?: string;
    workspace_id?: string;
    is_read?: boolean;
    priority?: "low" | "normal" | "high" | "urgent";
}, {
    type?: "info" | "warning" | "alert" | "system";
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "is_read" | "priority";
    sort_order?: "asc" | "desc";
    user_id?: string;
    workspace_id?: string;
    is_read?: boolean;
    priority?: "low" | "normal" | "high" | "urgent";
}>;
export declare const userPreferencesSchema: z.ZodObject<{
    id: z.ZodString;
    user_id: z.ZodString;
    email_notifications: z.ZodBoolean;
    in_app_notifications: z.ZodBoolean;
    email_frequency: z.ZodString;
    reduced_motion: z.ZodBoolean;
    date_format: z.ZodString;
    number_format: z.ZodString;
    default_dashboard_view: z.ZodString;
    theme_preference: z.ZodString;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    user_id?: string;
    email_notifications?: boolean;
    in_app_notifications?: boolean;
    email_frequency?: string;
    reduced_motion?: boolean;
    date_format?: string;
    number_format?: string;
    default_dashboard_view?: string;
    theme_preference?: string;
}, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    user_id?: string;
    email_notifications?: boolean;
    in_app_notifications?: boolean;
    email_frequency?: string;
    reduced_motion?: boolean;
    date_format?: string;
    number_format?: string;
    default_dashboard_view?: string;
    theme_preference?: string;
}>;
export declare const createUserPreferencesInputSchema: z.ZodObject<{
    user_id: z.ZodString;
    email_notifications: z.ZodDefault<z.ZodBoolean>;
    in_app_notifications: z.ZodDefault<z.ZodBoolean>;
    email_frequency: z.ZodDefault<z.ZodEnum<["immediate", "daily", "weekly"]>>;
    reduced_motion: z.ZodDefault<z.ZodBoolean>;
    date_format: z.ZodDefault<z.ZodEnum<["YYYY-MM-DD", "MM/DD/YYYY", "DD/MM/YYYY"]>>;
    number_format: z.ZodDefault<z.ZodEnum<["US", "EU", "UK"]>>;
    default_dashboard_view: z.ZodDefault<z.ZodEnum<["overview", "campaigns", "creatives", "analytics"]>>;
    theme_preference: z.ZodDefault<z.ZodEnum<["light", "dark", "auto"]>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    email_notifications?: boolean;
    in_app_notifications?: boolean;
    email_frequency?: "daily" | "weekly" | "immediate";
    reduced_motion?: boolean;
    date_format?: "YYYY-MM-DD" | "MM/DD/YYYY" | "DD/MM/YYYY";
    number_format?: "US" | "EU" | "UK";
    default_dashboard_view?: "overview" | "campaigns" | "creatives" | "analytics";
    theme_preference?: "light" | "dark" | "auto";
}, {
    user_id?: string;
    email_notifications?: boolean;
    in_app_notifications?: boolean;
    email_frequency?: "daily" | "weekly" | "immediate";
    reduced_motion?: boolean;
    date_format?: "YYYY-MM-DD" | "MM/DD/YYYY" | "DD/MM/YYYY";
    number_format?: "US" | "EU" | "UK";
    default_dashboard_view?: "overview" | "campaigns" | "creatives" | "analytics";
    theme_preference?: "light" | "dark" | "auto";
}>;
export declare const updateUserPreferencesInputSchema: z.ZodObject<{
    id: z.ZodString;
    email_notifications: z.ZodOptional<z.ZodBoolean>;
    in_app_notifications: z.ZodOptional<z.ZodBoolean>;
    email_frequency: z.ZodOptional<z.ZodEnum<["immediate", "daily", "weekly"]>>;
    reduced_motion: z.ZodOptional<z.ZodBoolean>;
    date_format: z.ZodOptional<z.ZodEnum<["YYYY-MM-DD", "MM/DD/YYYY", "DD/MM/YYYY"]>>;
    number_format: z.ZodOptional<z.ZodEnum<["US", "EU", "UK"]>>;
    default_dashboard_view: z.ZodOptional<z.ZodEnum<["overview", "campaigns", "creatives", "analytics"]>>;
    theme_preference: z.ZodOptional<z.ZodEnum<["light", "dark", "auto"]>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    email_notifications?: boolean;
    in_app_notifications?: boolean;
    email_frequency?: "daily" | "weekly" | "immediate";
    reduced_motion?: boolean;
    date_format?: "YYYY-MM-DD" | "MM/DD/YYYY" | "DD/MM/YYYY";
    number_format?: "US" | "EU" | "UK";
    default_dashboard_view?: "overview" | "campaigns" | "creatives" | "analytics";
    theme_preference?: "light" | "dark" | "auto";
}, {
    id?: string;
    email_notifications?: boolean;
    in_app_notifications?: boolean;
    email_frequency?: "daily" | "weekly" | "immediate";
    reduced_motion?: boolean;
    date_format?: "YYYY-MM-DD" | "MM/DD/YYYY" | "DD/MM/YYYY";
    number_format?: "US" | "EU" | "UK";
    default_dashboard_view?: "overview" | "campaigns" | "creatives" | "analytics";
    theme_preference?: "light" | "dark" | "auto";
}>;
export declare const sharedLinkSchema: z.ZodObject<{
    id: z.ZodString;
    workspace_id: z.ZodString;
    created_by: z.ZodString;
    link_token: z.ZodString;
    link_type: z.ZodString;
    dashboard_config: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
    access_level: z.ZodString;
    password_protected: z.ZodBoolean;
    password_hash: z.ZodNullable<z.ZodString>;
    expires_at: z.ZodNullable<z.ZodString>;
    is_active: z.ZodBoolean;
    view_count: z.ZodNumber;
    last_accessed_at: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    password_hash?: string;
    created_at?: string;
    updated_at?: string;
    workspace_id?: string;
    created_by?: string;
    is_active?: boolean;
    expires_at?: string;
    link_token?: string;
    link_type?: string;
    dashboard_config?: Record<string, any>;
    access_level?: string;
    password_protected?: boolean;
    view_count?: number;
    last_accessed_at?: string;
}, {
    id?: string;
    password_hash?: string;
    created_at?: string;
    updated_at?: string;
    workspace_id?: string;
    created_by?: string;
    is_active?: boolean;
    expires_at?: string;
    link_token?: string;
    link_type?: string;
    dashboard_config?: Record<string, any>;
    access_level?: string;
    password_protected?: boolean;
    view_count?: number;
    last_accessed_at?: string;
}>;
export declare const createSharedLinkInputSchema: z.ZodObject<{
    workspace_id: z.ZodString;
    created_by: z.ZodString;
    link_token: z.ZodString;
    link_type: z.ZodEnum<["dashboard", "report", "chart"]>;
    dashboard_config: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    access_level: z.ZodDefault<z.ZodEnum<["read_only", "view_only"]>>;
    password_protected: z.ZodDefault<z.ZodBoolean>;
    password_hash: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expires_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    password_hash?: string;
    workspace_id?: string;
    created_by?: string;
    expires_at?: string;
    link_token?: string;
    link_type?: "dashboard" | "report" | "chart";
    dashboard_config?: Record<string, any>;
    access_level?: "read_only" | "view_only";
    password_protected?: boolean;
}, {
    password_hash?: string;
    workspace_id?: string;
    created_by?: string;
    expires_at?: string;
    link_token?: string;
    link_type?: "dashboard" | "report" | "chart";
    dashboard_config?: Record<string, any>;
    access_level?: "read_only" | "view_only";
    password_protected?: boolean;
}>;
export declare const updateSharedLinkInputSchema: z.ZodObject<{
    id: z.ZodString;
    dashboard_config: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    access_level: z.ZodOptional<z.ZodEnum<["read_only", "view_only"]>>;
    password_protected: z.ZodOptional<z.ZodBoolean>;
    password_hash: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expires_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_active: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    password_hash?: string;
    is_active?: boolean;
    expires_at?: string;
    dashboard_config?: Record<string, any>;
    access_level?: "read_only" | "view_only";
    password_protected?: boolean;
}, {
    id?: string;
    password_hash?: string;
    is_active?: boolean;
    expires_at?: string;
    dashboard_config?: Record<string, any>;
    access_level?: "read_only" | "view_only";
    password_protected?: boolean;
}>;
export declare const searchSharedLinksInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    created_by: z.ZodOptional<z.ZodString>;
    link_type: z.ZodOptional<z.ZodEnum<["dashboard", "report", "chart"]>>;
    is_active: z.ZodOptional<z.ZodBoolean>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["view_count", "created_at", "last_accessed_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "view_count" | "last_accessed_at";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    created_by?: string;
    is_active?: boolean;
    link_type?: "dashboard" | "report" | "chart";
}, {
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "view_count" | "last_accessed_at";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    created_by?: string;
    is_active?: boolean;
    link_type?: "dashboard" | "report" | "chart";
}>;
export declare const exportJobSchema: z.ZodObject<{
    id: z.ZodString;
    workspace_id: z.ZodString;
    user_id: z.ZodString;
    export_type: z.ZodString;
    format: z.ZodString;
    filters: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
    date_from: z.ZodNullable<z.ZodString>;
    date_to: z.ZodNullable<z.ZodString>;
    platforms: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
    accounts: z.ZodNullable<z.ZodArray<z.ZodString, "many">>;
    status: z.ZodString;
    progress: z.ZodNumber;
    file_url: z.ZodNullable<z.ZodString>;
    file_size: z.ZodNullable<z.ZodNumber>;
    row_count: z.ZodNullable<z.ZodNumber>;
    error_message: z.ZodNullable<z.ZodString>;
    expires_at: z.ZodNullable<z.ZodString>;
    started_at: z.ZodNullable<z.ZodString>;
    completed_at: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    user_id?: string;
    workspace_id?: string;
    date_from?: string;
    date_to?: string;
    file_size?: number;
    progress?: number;
    started_at?: string;
    completed_at?: string;
    expires_at?: string;
    export_type?: string;
    format?: string;
    filters?: Record<string, any>;
    platforms?: string[];
    accounts?: string[];
    file_url?: string;
    row_count?: number;
    error_message?: string;
}, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    user_id?: string;
    workspace_id?: string;
    date_from?: string;
    date_to?: string;
    file_size?: number;
    progress?: number;
    started_at?: string;
    completed_at?: string;
    expires_at?: string;
    export_type?: string;
    format?: string;
    filters?: Record<string, any>;
    platforms?: string[];
    accounts?: string[];
    file_url?: string;
    row_count?: number;
    error_message?: string;
}>;
export declare const createExportJobInputSchema: z.ZodObject<{
    workspace_id: z.ZodString;
    user_id: z.ZodString;
    export_type: z.ZodEnum<["metrics", "campaigns", "creative_performance", "alerts"]>;
    format: z.ZodEnum<["csv", "xlsx", "pdf"]>;
    filters: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    date_from: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    date_to: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    platforms: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>, "many">>>;
    accounts: z.ZodOptional<z.ZodNullable<z.ZodArray<z.ZodString, "many">>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    workspace_id?: string;
    date_from?: string;
    date_to?: string;
    export_type?: "campaigns" | "metrics" | "creative_performance" | "alerts";
    format?: "csv" | "xlsx" | "pdf";
    filters?: Record<string, any>;
    platforms?: ("facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter")[];
    accounts?: string[];
}, {
    user_id?: string;
    workspace_id?: string;
    date_from?: string;
    date_to?: string;
    export_type?: "campaigns" | "metrics" | "creative_performance" | "alerts";
    format?: "csv" | "xlsx" | "pdf";
    filters?: Record<string, any>;
    platforms?: ("facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter")[];
    accounts?: string[];
}>;
export declare const updateExportJobInputSchema: z.ZodObject<{
    id: z.ZodString;
    status: z.ZodOptional<z.ZodEnum<["queued", "processing", "completed", "failed"]>>;
    progress: z.ZodOptional<z.ZodNumber>;
    file_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    file_size: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    row_count: z.ZodOptional<z.ZodNullable<z.ZodNumber>>;
    error_message: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    expires_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    started_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    completed_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    status?: "queued" | "processing" | "completed" | "failed";
    file_size?: number;
    progress?: number;
    started_at?: string;
    completed_at?: string;
    expires_at?: string;
    file_url?: string;
    row_count?: number;
    error_message?: string;
}, {
    id?: string;
    status?: "queued" | "processing" | "completed" | "failed";
    file_size?: number;
    progress?: number;
    started_at?: string;
    completed_at?: string;
    expires_at?: string;
    file_url?: string;
    row_count?: number;
    error_message?: string;
}>;
export declare const searchExportJobsInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    user_id: z.ZodOptional<z.ZodString>;
    export_type: z.ZodOptional<z.ZodEnum<["metrics", "campaigns", "creative_performance", "alerts"]>>;
    status: z.ZodOptional<z.ZodEnum<["queued", "processing", "completed", "failed"]>>;
    format: z.ZodOptional<z.ZodEnum<["csv", "xlsx", "pdf"]>>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["created_at", "status", "export_type"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    status?: "queued" | "processing" | "completed" | "failed";
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "export_type";
    sort_order?: "asc" | "desc";
    user_id?: string;
    workspace_id?: string;
    export_type?: "campaigns" | "metrics" | "creative_performance" | "alerts";
    format?: "csv" | "xlsx" | "pdf";
}, {
    status?: "queued" | "processing" | "completed" | "failed";
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "status" | "export_type";
    sort_order?: "asc" | "desc";
    user_id?: string;
    workspace_id?: string;
    export_type?: "campaigns" | "metrics" | "creative_performance" | "alerts";
    format?: "csv" | "xlsx" | "pdf";
}>;
export declare const anomalyDetectionSchema: z.ZodObject<{
    id: z.ZodString;
    workspace_id: z.ZodString;
    entity_type: z.ZodString;
    entity_id: z.ZodString;
    metric: z.ZodString;
    platform: z.ZodString;
    date: z.ZodString;
    current_value: z.ZodNumber;
    expected_value: z.ZodNumber;
    z_score: z.ZodNumber;
    deviation_percentage: z.ZodNumber;
    anomaly_type: z.ZodString;
    severity: z.ZodString;
    is_reviewed: z.ZodBoolean;
    reviewed_by: z.ZodNullable<z.ZodString>;
    reviewed_at: z.ZodNullable<z.ZodString>;
    review_notes: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    workspace_id?: string;
    date?: string;
    platform?: string;
    metric?: string;
    severity?: string;
    entity_type?: string;
    entity_id?: string;
    current_value?: number;
    expected_value?: number;
    z_score?: number;
    deviation_percentage?: number;
    anomaly_type?: string;
    is_reviewed?: boolean;
    reviewed_by?: string;
    reviewed_at?: string;
    review_notes?: string;
}, {
    id?: string;
    created_at?: string;
    workspace_id?: string;
    date?: string;
    platform?: string;
    metric?: string;
    severity?: string;
    entity_type?: string;
    entity_id?: string;
    current_value?: number;
    expected_value?: number;
    z_score?: number;
    deviation_percentage?: number;
    anomaly_type?: string;
    is_reviewed?: boolean;
    reviewed_by?: string;
    reviewed_at?: string;
    review_notes?: string;
}>;
export declare const createAnomalyDetectionInputSchema: z.ZodObject<{
    workspace_id: z.ZodString;
    entity_type: z.ZodEnum<["account", "campaign", "adset", "ad"]>;
    entity_id: z.ZodString;
    metric: z.ZodEnum<["spend", "impressions", "clicks", "conversions", "revenue", "ctr", "cpm", "cpc", "cpa", "cvr", "roas"]>;
    platform: z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>;
    date: z.ZodString;
    current_value: z.ZodNumber;
    expected_value: z.ZodNumber;
    z_score: z.ZodNumber;
    deviation_percentage: z.ZodNumber;
    anomaly_type: z.ZodEnum<["spike", "drop", "pattern_break"]>;
    severity: z.ZodEnum<["low", "medium", "high", "critical"]>;
}, "strip", z.ZodTypeAny, {
    workspace_id?: string;
    date?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    metric?: "spend" | "impressions" | "clicks" | "conversions" | "revenue" | "ctr" | "cpm" | "cpc" | "cpa" | "cvr" | "roas";
    severity?: "critical" | "low" | "high" | "medium";
    entity_type?: "account" | "campaign" | "adset" | "ad";
    entity_id?: string;
    current_value?: number;
    expected_value?: number;
    z_score?: number;
    deviation_percentage?: number;
    anomaly_type?: "spike" | "drop" | "pattern_break";
}, {
    workspace_id?: string;
    date?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    metric?: "spend" | "impressions" | "clicks" | "conversions" | "revenue" | "ctr" | "cpm" | "cpc" | "cpa" | "cvr" | "roas";
    severity?: "critical" | "low" | "high" | "medium";
    entity_type?: "account" | "campaign" | "adset" | "ad";
    entity_id?: string;
    current_value?: number;
    expected_value?: number;
    z_score?: number;
    deviation_percentage?: number;
    anomaly_type?: "spike" | "drop" | "pattern_break";
}>;
export declare const updateAnomalyDetectionInputSchema: z.ZodObject<{
    id: z.ZodString;
    is_reviewed: z.ZodOptional<z.ZodBoolean>;
    reviewed_by: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    reviewed_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    review_notes: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    is_reviewed?: boolean;
    reviewed_by?: string;
    reviewed_at?: string;
    review_notes?: string;
}, {
    id?: string;
    is_reviewed?: boolean;
    reviewed_by?: string;
    reviewed_at?: string;
    review_notes?: string;
}>;
export declare const searchAnomalyDetectionsInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    entity_type: z.ZodOptional<z.ZodEnum<["account", "campaign", "adset", "ad"]>>;
    metric: z.ZodOptional<z.ZodEnum<["spend", "impressions", "clicks", "conversions", "revenue", "ctr", "cpm", "cpc", "cpa", "cvr", "roas"]>>;
    platform: z.ZodOptional<z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>>;
    anomaly_type: z.ZodOptional<z.ZodEnum<["spike", "drop", "pattern_break"]>>;
    severity: z.ZodOptional<z.ZodEnum<["low", "medium", "high", "critical"]>>;
    is_reviewed: z.ZodOptional<z.ZodBoolean>;
    date_from: z.ZodOptional<z.ZodString>;
    date_to: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["date", "severity", "z_score", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "date" | "severity" | "z_score";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    date_from?: string;
    date_to?: string;
    metric?: "spend" | "impressions" | "clicks" | "conversions" | "revenue" | "ctr" | "cpm" | "cpc" | "cpa" | "cvr" | "roas";
    severity?: "critical" | "low" | "high" | "medium";
    entity_type?: "account" | "campaign" | "adset" | "ad";
    anomaly_type?: "spike" | "drop" | "pattern_break";
    is_reviewed?: boolean;
}, {
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "date" | "severity" | "z_score";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    platform?: "facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter";
    date_from?: string;
    date_to?: string;
    metric?: "spend" | "impressions" | "clicks" | "conversions" | "revenue" | "ctr" | "cpm" | "cpc" | "cpa" | "cvr" | "roas";
    severity?: "critical" | "low" | "high" | "medium";
    entity_type?: "account" | "campaign" | "adset" | "ad";
    anomaly_type?: "spike" | "drop" | "pattern_break";
    is_reviewed?: boolean;
}>;
export declare const creativePerformanceSchema: z.ZodObject<{
    id: z.ZodString;
    workspace_id: z.ZodString;
    creative_name: z.ZodString;
    creative_thumb_url: z.ZodNullable<z.ZodString>;
    creative_tags: z.ZodNullable<z.ZodString>;
    ad_format: z.ZodNullable<z.ZodString>;
    platforms: z.ZodArray<z.ZodString, "many">;
    total_spend: z.ZodNumber;
    total_impressions: z.ZodNumber;
    total_clicks: z.ZodNumber;
    total_conversions: z.ZodNumber;
    total_revenue: z.ZodNumber;
    avg_ctr: z.ZodNullable<z.ZodNumber>;
    avg_cpm: z.ZodNullable<z.ZodNumber>;
    avg_cpc: z.ZodNullable<z.ZodNumber>;
    avg_cpa: z.ZodNullable<z.ZodNumber>;
    avg_cvr: z.ZodNullable<z.ZodNumber>;
    avg_roas: z.ZodNullable<z.ZodNumber>;
    campaign_count: z.ZodNumber;
    performance_rank: z.ZodNullable<z.ZodString>;
    first_seen_date: z.ZodString;
    last_seen_date: z.ZodString;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    workspace_id?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: string;
    platforms?: string[];
    total_spend?: number;
    total_impressions?: number;
    total_clicks?: number;
    total_conversions?: number;
    total_revenue?: number;
    avg_ctr?: number;
    avg_cpm?: number;
    avg_cpc?: number;
    avg_cpa?: number;
    avg_cvr?: number;
    avg_roas?: number;
    campaign_count?: number;
    performance_rank?: string;
    first_seen_date?: string;
    last_seen_date?: string;
}, {
    id?: string;
    created_at?: string;
    updated_at?: string;
    workspace_id?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: string;
    platforms?: string[];
    total_spend?: number;
    total_impressions?: number;
    total_clicks?: number;
    total_conversions?: number;
    total_revenue?: number;
    avg_ctr?: number;
    avg_cpm?: number;
    avg_cpc?: number;
    avg_cpa?: number;
    avg_cvr?: number;
    avg_roas?: number;
    campaign_count?: number;
    performance_rank?: string;
    first_seen_date?: string;
    last_seen_date?: string;
}>;
export declare const createCreativePerformanceInputSchema: z.ZodObject<{
    workspace_id: z.ZodString;
    creative_name: z.ZodString;
    creative_thumb_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    creative_tags: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ad_format: z.ZodOptional<z.ZodNullable<z.ZodEnum<["SINGLE_IMAGE", "SINGLE_VIDEO", "CAROUSEL", "COLLECTION"]>>>;
    platforms: z.ZodArray<z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>, "many">;
    total_spend: z.ZodDefault<z.ZodNumber>;
    total_impressions: z.ZodDefault<z.ZodNumber>;
    total_clicks: z.ZodDefault<z.ZodNumber>;
    total_conversions: z.ZodDefault<z.ZodNumber>;
    total_revenue: z.ZodDefault<z.ZodNumber>;
    campaign_count: z.ZodDefault<z.ZodNumber>;
    first_seen_date: z.ZodString;
    last_seen_date: z.ZodString;
}, "strip", z.ZodTypeAny, {
    workspace_id?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
    platforms?: ("facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter")[];
    total_spend?: number;
    total_impressions?: number;
    total_clicks?: number;
    total_conversions?: number;
    total_revenue?: number;
    campaign_count?: number;
    first_seen_date?: string;
    last_seen_date?: string;
}, {
    workspace_id?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
    platforms?: ("facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter")[];
    total_spend?: number;
    total_impressions?: number;
    total_clicks?: number;
    total_conversions?: number;
    total_revenue?: number;
    campaign_count?: number;
    first_seen_date?: string;
    last_seen_date?: string;
}>;
export declare const updateCreativePerformanceInputSchema: z.ZodObject<{
    id: z.ZodString;
    creative_name: z.ZodOptional<z.ZodString>;
    creative_thumb_url: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    creative_tags: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ad_format: z.ZodOptional<z.ZodNullable<z.ZodEnum<["SINGLE_IMAGE", "SINGLE_VIDEO", "CAROUSEL", "COLLECTION"]>>>;
    platforms: z.ZodOptional<z.ZodArray<z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>, "many">>;
    total_spend: z.ZodOptional<z.ZodNumber>;
    total_impressions: z.ZodOptional<z.ZodNumber>;
    total_clicks: z.ZodOptional<z.ZodNumber>;
    total_conversions: z.ZodOptional<z.ZodNumber>;
    total_revenue: z.ZodOptional<z.ZodNumber>;
    performance_rank: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    last_seen_date: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
    platforms?: ("facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter")[];
    total_spend?: number;
    total_impressions?: number;
    total_clicks?: number;
    total_conversions?: number;
    total_revenue?: number;
    performance_rank?: string;
    last_seen_date?: string;
}, {
    id?: string;
    creative_name?: string;
    creative_thumb_url?: string;
    creative_tags?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
    platforms?: ("facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter")[];
    total_spend?: number;
    total_impressions?: number;
    total_clicks?: number;
    total_conversions?: number;
    total_revenue?: number;
    performance_rank?: string;
    last_seen_date?: string;
}>;
export declare const searchCreativePerformanceInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    platforms: z.ZodOptional<z.ZodArray<z.ZodEnum<["facebook", "google", "tiktok", "snapchat", "linkedin", "twitter"]>, "many">>;
    ad_format: z.ZodOptional<z.ZodEnum<["SINGLE_IMAGE", "SINGLE_VIDEO", "CAROUSEL", "COLLECTION"]>>;
    performance_rank: z.ZodOptional<z.ZodString>;
    query: z.ZodOptional<z.ZodString>;
    min_spend: z.ZodOptional<z.ZodNumber>;
    max_spend: z.ZodOptional<z.ZodNumber>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["creative_name", "total_spend", "avg_roas", "campaign_count", "last_seen_date"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "creative_name" | "total_spend" | "avg_roas" | "campaign_count" | "last_seen_date";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
    platforms?: ("facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter")[];
    performance_rank?: string;
    min_spend?: number;
    max_spend?: number;
}, {
    query?: string;
    limit?: number;
    offset?: number;
    sort_by?: "creative_name" | "total_spend" | "avg_roas" | "campaign_count" | "last_seen_date";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    ad_format?: "SINGLE_IMAGE" | "SINGLE_VIDEO" | "CAROUSEL" | "COLLECTION";
    platforms?: ("facebook" | "google" | "tiktok" | "snapchat" | "linkedin" | "twitter")[];
    performance_rank?: string;
    min_spend?: number;
    max_spend?: number;
}>;
export declare const workspaceInvitationSchema: z.ZodObject<{
    id: z.ZodString;
    workspace_id: z.ZodString;
    invited_by: z.ZodString;
    email: z.ZodString;
    role: z.ZodString;
    invitation_token: z.ZodString;
    status: z.ZodString;
    expires_at: z.ZodString;
    accepted_at: z.ZodNullable<z.ZodString>;
    accepted_by: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
    updated_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    email?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    workspace_id?: string;
    role?: string;
    invited_by?: string;
    invitation_token?: string;
    expires_at?: string;
    accepted_at?: string;
    accepted_by?: string;
}, {
    id?: string;
    email?: string;
    created_at?: string;
    updated_at?: string;
    status?: string;
    workspace_id?: string;
    role?: string;
    invited_by?: string;
    invitation_token?: string;
    expires_at?: string;
    accepted_at?: string;
    accepted_by?: string;
}>;
export declare const createWorkspaceInvitationInputSchema: z.ZodObject<{
    workspace_id: z.ZodString;
    invited_by: z.ZodString;
    email: z.ZodString;
    role: z.ZodEnum<["admin", "member"]>;
    invitation_token: z.ZodString;
    expires_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    email?: string;
    workspace_id?: string;
    role?: "admin" | "member";
    invited_by?: string;
    invitation_token?: string;
    expires_at?: string;
}, {
    email?: string;
    workspace_id?: string;
    role?: "admin" | "member";
    invited_by?: string;
    invitation_token?: string;
    expires_at?: string;
}>;
export declare const updateWorkspaceInvitationInputSchema: z.ZodObject<{
    id: z.ZodString;
    status: z.ZodOptional<z.ZodEnum<["pending", "accepted", "declined", "expired"]>>;
    accepted_at: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    accepted_by: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    status?: "pending" | "accepted" | "declined" | "expired";
    accepted_at?: string;
    accepted_by?: string;
}, {
    id?: string;
    status?: "pending" | "accepted" | "declined" | "expired";
    accepted_at?: string;
    accepted_by?: string;
}>;
export declare const searchWorkspaceInvitationsInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    email: z.ZodOptional<z.ZodString>;
    status: z.ZodOptional<z.ZodEnum<["pending", "accepted", "declined", "expired"]>>;
    role: z.ZodOptional<z.ZodEnum<["admin", "member"]>>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["email", "role", "status", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    email?: string;
    status?: "pending" | "accepted" | "declined" | "expired";
    limit?: number;
    offset?: number;
    sort_by?: "email" | "created_at" | "status" | "role";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    role?: "admin" | "member";
}, {
    email?: string;
    status?: "pending" | "accepted" | "declined" | "expired";
    limit?: number;
    offset?: number;
    sort_by?: "email" | "created_at" | "status" | "role";
    sort_order?: "asc" | "desc";
    workspace_id?: string;
    role?: "admin" | "member";
}>;
export declare const auditLogSchema: z.ZodObject<{
    id: z.ZodString;
    workspace_id: z.ZodString;
    user_id: z.ZodNullable<z.ZodString>;
    action: z.ZodString;
    entity_type: z.ZodNullable<z.ZodString>;
    entity_id: z.ZodNullable<z.ZodString>;
    details: z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>;
    ip_address: z.ZodNullable<z.ZodString>;
    user_agent: z.ZodNullable<z.ZodString>;
    created_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    user_id?: string;
    workspace_id?: string;
    details?: Record<string, any>;
    entity_type?: string;
    entity_id?: string;
    action?: string;
    ip_address?: string;
    user_agent?: string;
}, {
    id?: string;
    created_at?: string;
    user_id?: string;
    workspace_id?: string;
    details?: Record<string, any>;
    entity_type?: string;
    entity_id?: string;
    action?: string;
    ip_address?: string;
    user_agent?: string;
}>;
export declare const createAuditLogInputSchema: z.ZodObject<{
    workspace_id: z.ZodString;
    user_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    action: z.ZodString;
    entity_type: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    entity_id: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    details: z.ZodOptional<z.ZodNullable<z.ZodRecord<z.ZodString, z.ZodAny>>>;
    ip_address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    user_agent: z.ZodOptional<z.ZodNullable<z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    workspace_id?: string;
    details?: Record<string, any>;
    entity_type?: string;
    entity_id?: string;
    action?: string;
    ip_address?: string;
    user_agent?: string;
}, {
    user_id?: string;
    workspace_id?: string;
    details?: Record<string, any>;
    entity_type?: string;
    entity_id?: string;
    action?: string;
    ip_address?: string;
    user_agent?: string;
}>;
export declare const searchAuditLogsInputSchema: z.ZodObject<{
    workspace_id: z.ZodOptional<z.ZodString>;
    user_id: z.ZodOptional<z.ZodString>;
    action: z.ZodOptional<z.ZodString>;
    entity_type: z.ZodOptional<z.ZodString>;
    date_from: z.ZodOptional<z.ZodString>;
    date_to: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["action", "created_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "action";
    sort_order?: "asc" | "desc";
    user_id?: string;
    workspace_id?: string;
    date_from?: string;
    date_to?: string;
    entity_type?: string;
    action?: string;
}, {
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "action";
    sort_order?: "asc" | "desc";
    user_id?: string;
    workspace_id?: string;
    date_from?: string;
    date_to?: string;
    entity_type?: string;
    action?: string;
}>;
export declare const userSessionSchema: z.ZodObject<{
    id: z.ZodString;
    user_id: z.ZodString;
    session_token: z.ZodString;
    refresh_token: z.ZodNullable<z.ZodString>;
    ip_address: z.ZodNullable<z.ZodString>;
    user_agent: z.ZodNullable<z.ZodString>;
    is_active: z.ZodBoolean;
    last_activity_at: z.ZodString;
    expires_at: z.ZodString;
    created_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    id?: string;
    created_at?: string;
    user_id?: string;
    is_active?: boolean;
    expires_at?: string;
    ip_address?: string;
    user_agent?: string;
    session_token?: string;
    refresh_token?: string;
    last_activity_at?: string;
}, {
    id?: string;
    created_at?: string;
    user_id?: string;
    is_active?: boolean;
    expires_at?: string;
    ip_address?: string;
    user_agent?: string;
    session_token?: string;
    refresh_token?: string;
    last_activity_at?: string;
}>;
export declare const createUserSessionInputSchema: z.ZodObject<{
    user_id: z.ZodString;
    session_token: z.ZodString;
    refresh_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    ip_address: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    user_agent: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_active: z.ZodDefault<z.ZodBoolean>;
    last_activity_at: z.ZodString;
    expires_at: z.ZodString;
}, "strip", z.ZodTypeAny, {
    user_id?: string;
    is_active?: boolean;
    expires_at?: string;
    ip_address?: string;
    user_agent?: string;
    session_token?: string;
    refresh_token?: string;
    last_activity_at?: string;
}, {
    user_id?: string;
    is_active?: boolean;
    expires_at?: string;
    ip_address?: string;
    user_agent?: string;
    session_token?: string;
    refresh_token?: string;
    last_activity_at?: string;
}>;
export declare const updateUserSessionInputSchema: z.ZodObject<{
    id: z.ZodString;
    refresh_token: z.ZodOptional<z.ZodNullable<z.ZodString>>;
    is_active: z.ZodOptional<z.ZodBoolean>;
    last_activity_at: z.ZodOptional<z.ZodString>;
    expires_at: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    id?: string;
    is_active?: boolean;
    expires_at?: string;
    refresh_token?: string;
    last_activity_at?: string;
}, {
    id?: string;
    is_active?: boolean;
    expires_at?: string;
    refresh_token?: string;
    last_activity_at?: string;
}>;
export declare const searchUserSessionsInputSchema: z.ZodObject<{
    user_id: z.ZodOptional<z.ZodString>;
    is_active: z.ZodOptional<z.ZodBoolean>;
    ip_address: z.ZodOptional<z.ZodString>;
    limit: z.ZodDefault<z.ZodNumber>;
    offset: z.ZodDefault<z.ZodNumber>;
    sort_by: z.ZodDefault<z.ZodEnum<["last_activity_at", "created_at", "expires_at"]>>;
    sort_order: z.ZodDefault<z.ZodEnum<["asc", "desc"]>>;
}, "strip", z.ZodTypeAny, {
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "expires_at" | "last_activity_at";
    sort_order?: "asc" | "desc";
    user_id?: string;
    is_active?: boolean;
    ip_address?: string;
}, {
    limit?: number;
    offset?: number;
    sort_by?: "created_at" | "expires_at" | "last_activity_at";
    sort_order?: "asc" | "desc";
    user_id?: string;
    is_active?: boolean;
    ip_address?: string;
}>;
export type User = z.infer<typeof userSchema>;
export type CreateUserInput = z.infer<typeof createUserInputSchema>;
export type UpdateUserInput = z.infer<typeof updateUserInputSchema>;
export type SearchUsersInput = z.infer<typeof searchUsersInputSchema>;
export type Workspace = z.infer<typeof workspaceSchema>;
export type CreateWorkspaceInput = z.infer<typeof createWorkspaceInputSchema>;
export type UpdateWorkspaceInput = z.infer<typeof updateWorkspaceInputSchema>;
export type SearchWorkspacesInput = z.infer<typeof searchWorkspacesInputSchema>;
export type Membership = z.infer<typeof membershipSchema>;
export type CreateMembershipInput = z.infer<typeof createMembershipInputSchema>;
export type UpdateMembershipInput = z.infer<typeof updateMembershipInputSchema>;
export type SearchMembershipsInput = z.infer<typeof searchMembershipsInputSchema>;
export type Account = z.infer<typeof accountSchema>;
export type CreateAccountInput = z.infer<typeof createAccountInputSchema>;
export type UpdateAccountInput = z.infer<typeof updateAccountInputSchema>;
export type SearchAccountsInput = z.infer<typeof searchAccountsInputSchema>;
export type Campaign = z.infer<typeof campaignSchema>;
export type CreateCampaignInput = z.infer<typeof createCampaignInputSchema>;
export type UpdateCampaignInput = z.infer<typeof updateCampaignInputSchema>;
export type SearchCampaignsInput = z.infer<typeof searchCampaignsInputSchema>;
export type AdSet = z.infer<typeof adSetSchema>;
export type CreateAdSetInput = z.infer<typeof createAdSetInputSchema>;
export type UpdateAdSetInput = z.infer<typeof updateAdSetInputSchema>;
export type SearchAdSetsInput = z.infer<typeof searchAdSetsInputSchema>;
export type Ad = z.infer<typeof adSchema>;
export type CreateAdInput = z.infer<typeof createAdInputSchema>;
export type UpdateAdInput = z.infer<typeof updateAdInputSchema>;
export type SearchAdsInput = z.infer<typeof searchAdsInputSchema>;
export type MetricsDaily = z.infer<typeof metricsDailySchema>;
export type CreateMetricsDailyInput = z.infer<typeof createMetricsDailyInputSchema>;
export type SearchMetricsDailyInput = z.infer<typeof searchMetricsDailyInputSchema>;
export type UploadJob = z.infer<typeof uploadJobSchema>;
export type CreateUploadJobInput = z.infer<typeof createUploadJobInputSchema>;
export type UpdateUploadJobInput = z.infer<typeof updateUploadJobInputSchema>;
export type SearchUploadJobsInput = z.infer<typeof searchUploadJobsInputSchema>;
export type MappingTemplate = z.infer<typeof mappingTemplateSchema>;
export type CreateMappingTemplateInput = z.infer<typeof createMappingTemplateInputSchema>;
export type UpdateMappingTemplateInput = z.infer<typeof updateMappingTemplateInputSchema>;
export type SearchMappingTemplatesInput = z.infer<typeof searchMappingTemplatesInputSchema>;
export type AlertRule = z.infer<typeof alertRuleSchema>;
export type CreateAlertRuleInput = z.infer<typeof createAlertRuleInputSchema>;
export type UpdateAlertRuleInput = z.infer<typeof updateAlertRuleInputSchema>;
export type SearchAlertRulesInput = z.infer<typeof searchAlertRulesInputSchema>;
export type AlertTrigger = z.infer<typeof alertTriggerSchema>;
export type CreateAlertTriggerInput = z.infer<typeof createAlertTriggerInputSchema>;
export type UpdateAlertTriggerInput = z.infer<typeof updateAlertTriggerInputSchema>;
export type SearchAlertTriggersInput = z.infer<typeof searchAlertTriggersInputSchema>;
export type Notification = z.infer<typeof notificationSchema>;
export type CreateNotificationInput = z.infer<typeof createNotificationInputSchema>;
export type UpdateNotificationInput = z.infer<typeof updateNotificationInputSchema>;
export type SearchNotificationsInput = z.infer<typeof searchNotificationsInputSchema>;
export type UserPreferences = z.infer<typeof userPreferencesSchema>;
export type CreateUserPreferencesInput = z.infer<typeof createUserPreferencesInputSchema>;
export type UpdateUserPreferencesInput = z.infer<typeof updateUserPreferencesInputSchema>;
export type SharedLink = z.infer<typeof sharedLinkSchema>;
export type CreateSharedLinkInput = z.infer<typeof createSharedLinkInputSchema>;
export type UpdateSharedLinkInput = z.infer<typeof updateSharedLinkInputSchema>;
export type SearchSharedLinksInput = z.infer<typeof searchSharedLinksInputSchema>;
export type ExportJob = z.infer<typeof exportJobSchema>;
export type CreateExportJobInput = z.infer<typeof createExportJobInputSchema>;
export type UpdateExportJobInput = z.infer<typeof updateExportJobInputSchema>;
export type SearchExportJobsInput = z.infer<typeof searchExportJobsInputSchema>;
export type AnomalyDetection = z.infer<typeof anomalyDetectionSchema>;
export type CreateAnomalyDetectionInput = z.infer<typeof createAnomalyDetectionInputSchema>;
export type UpdateAnomalyDetectionInput = z.infer<typeof updateAnomalyDetectionInputSchema>;
export type SearchAnomalyDetectionsInput = z.infer<typeof searchAnomalyDetectionsInputSchema>;
export type CreativePerformance = z.infer<typeof creativePerformanceSchema>;
export type CreateCreativePerformanceInput = z.infer<typeof createCreativePerformanceInputSchema>;
export type UpdateCreativePerformanceInput = z.infer<typeof updateCreativePerformanceInputSchema>;
export type SearchCreativePerformanceInput = z.infer<typeof searchCreativePerformanceInputSchema>;
export type WorkspaceInvitation = z.infer<typeof workspaceInvitationSchema>;
export type CreateWorkspaceInvitationInput = z.infer<typeof createWorkspaceInvitationInputSchema>;
export type UpdateWorkspaceInvitationInput = z.infer<typeof updateWorkspaceInvitationInputSchema>;
export type SearchWorkspaceInvitationsInput = z.infer<typeof searchWorkspaceInvitationsInputSchema>;
export type AuditLog = z.infer<typeof auditLogSchema>;
export type CreateAuditLogInput = z.infer<typeof createAuditLogInputSchema>;
export type SearchAuditLogsInput = z.infer<typeof searchAuditLogsInputSchema>;
export type UserSession = z.infer<typeof userSessionSchema>;
export type CreateUserSessionInput = z.infer<typeof createUserSessionInputSchema>;
export type UpdateUserSessionInput = z.infer<typeof updateUserSessionInputSchema>;
export type SearchUserSessionsInput = z.infer<typeof searchUserSessionsInputSchema>;
//# sourceMappingURL=schema.d.ts.map